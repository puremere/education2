
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}


@section scripts{
    <link href="~/Content/flowplayer.skin.css" rel="stylesheet" />
    <script src="https://cdn.webrtc-experiment.com/commits.js"></script>
    <script src="https://cdn.WebRTC-Experiment.com/MediaStreamRecorder.js"></script>
    <script src="https://cdn.WebRTC-Experiment.com/gumadapter.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <script src="http://releases.flowplayer.org/js/flowplayer-
      3.2.12.min.js"></script>

    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };

            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
    <script>
        var chat = $.connection.chatHub;
        function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
            navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
        }

        var mediaConstraints = {
            audio: true
        };
        document.querySelector('#save-recording').onclick = function () {
            this.disabled = true;
            mediaRecorder.save();
            // alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
        };
        function startRecording(idx) {
            $('#start-recording').disabled = true;
            audiosContainer = document.getElementById('audios-container');
            document.getElementById("clicks").innerHTML = "درحال رکورد";

            var f = document.getElementById('clicks');
            setInterval(function () {
                f.style.display = (f.style.display == 'none' ? '' : 'none');
            }, 1000);

            captureUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
        };

        function stopRecording() {
            $('#stop-recording').disabled = true;

            document.getElementById("clicks").innerHTML = "";

            //var f = document.getElementById('clicks');
            //setInterval(function () {
            //    f.style.display = (f.style.display == 'none' ? '' : 'none');
            //}, 10000);
            mediaRecorder.stop();
            mediaRecorder.stream.stop();


            $('.start-recording').disabled = false;
        };

        function saveRecording() {
            mediaRecorder.save();
        };

        var mediaRecorder;

        function onMediaSuccess(stream) {
            var TOK = $("#validation").val();

            mediaRecorder = new MediaStreamRecorder(stream);
            mediaRecorder.stream = stream;
            mediaRecorder.mimeType = 'audio/wav';
            mediaRecorder.audioChannels = 1;
            mediaRecorder.ondataavailable = function (blob) {
                $('#record-audio').html("<audio controls=''><source src=" + URL.createObjectURL(blob) + "></source></audio>");

                var fileObject = new File([blob], "test", {
                    type: 'audio/wav'
                });
                var formData = new FormData();

                // recorded data
                formData.append('audio-blob', fileObject);

                // file name
                formData.append('audio-filename', fileObject.name);
                alert('@Session["GroupID"]');
                $.ajax({
                    url: '/User/sendToServer', // replace with your own server URL
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',

                    success: function (response) {
                        var array = response.split(',');
                        //alert(array[0]);
                        //alert(array[1]);
                        chat.server.send(array[0], array[1], "send", '@Session["GroupID"]');
                    }
                });
                //var url = URL.createObjectURL(blob);
                //var a = document.createElement('a');
                //document.body.appendChild(a);
                //a.style = 'display: none';
                //a.href = url;
                //a.download = 'test.wav';
                //a.click();
                //window.URL.revokeObjectURL(url);

            };

            var timeInterval = 360 * 1000;

            mediaRecorder.start(timeInterval);

            $('#stop-recording').disabled = false;
        }

        function onMediaError(e) {
            console.error('media error', e);
        }

        function bytesToSize(bytes) {
            var k = 1000;
            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            if (bytes === 0) return '0 Bytes';
            var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
            return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
        }

        function getTimeLength(milliseconds) {
            var data = new Date(milliseconds);
            return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() + " second(s)";
        }

        window.onbeforeunload = function () {
            $('#start-recording').disabled = false;
        };

    </script>


    <script src="~/Scripts/flowplayer1.js"></script>
    <script src="~/Scripts/hls.light.min.js"></script>
}

<div class="row" id="AuthHolder">
    <div class="row" style="padding:10px; border:1px solid #ddd; border-radius:5px; margin:10px; margin-top:85px">
        <input class="form-control" id="validation" style="display:inline-block; width:450px; " placeholder="لطفاً کد آموزنده را وارد نمایید" />
        <div class="btn btn-default" style="display:inline-block" id="tokenSubmit">تایید</div>
    </div>
    <script>
        var chat = $.connection.chatHub;
        $("#tokenSubmit").click(function () {


            var TOK = $("#validation").val();

            $.ajax({
                url: '/User/CheckToken',
                data: {
                    token: TOK
                },
                type: 'POST',
                success: function (data) {
                    if (data === 'success') {

                        //chat.server.JoinGroup("aaaadfddf");
                        chat.server.send("", "", "JG", TOK);
                        //$("#loading").css("display", "none");
                        $("#MainContentHodel").css("display", "inline-block");
                        $("#AuthHolder").css("display", "none");

                    }
                }
            })
        })

    </script>


</div>
<div class="row" ; style=" width:100%; display:none" id="MainContentHodel">
    <div class="col-lg-3" style=" float: left;">
        <div class="row" style=" text-align: center; padding: 10px 0; border: 1px solid #ddd;">
            <button class="btn btn-primary" id="start-recording" onclick="startRecording()">Recording Start</button>
            <button class="btn btn-default" id="stop-recording" onclick="stopRecording()">Stop</button>
            <div class="row" style="min-height:20px; margin-top:5px">
                <span id="clicks"> </span>
            </div>

        </div>
        <div class="row" id="teacherMaterialHolder" style="margin-top: 5px; height: 500px; border: 1px solid #ddd;">

        </div>
    </div>
    <div class="col-lg-9">
        <div class="player_wrapper" style="direction:ltr; padding:0;">
            <div class="player_container">
                <div id="vod_player" data-native_fullscreen="true" data-ratio="0.555" data-share="false" class="flowplayer" data-logo="https://stream1.ir/wp-content/uploads/live_poster/9e4e341f401b60b3c45bec67481b3084552d3562.png">
                    <video class="livestream" data-title="VOD stream" poster="//player.stream1.ir/images/splash1.png">
                        <source type="application/x-mpegurl" src="http://l.stream1.ir:1935/voddemo/mp4:sample.mp4/playlist.m3u8">
                    </video>
                </div>
            </div>
        </div>
    </div>
</div>






