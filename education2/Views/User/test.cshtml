
@{
    ViewBag.Title = "test";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
}

@section scripts{
    <script src="//www.webrtc-experiment.com/screen.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>

            (function () {
               
                var _myConnection, // My RTCPeerConnection instance
                    _myMediaStream; // My MediaStream instance

                // Set up the SignalR connection
                var hub = $.connection.chatHub;
               
                $.connection.hub.url = '/signalr/hubs';
               
                $.connection.hub.start(function () {
                    
                   // alert('connected to signal server.');
                    //init(); // Start up the app
                });

                // Generates a new connection object and ties up the proper callbacks.
                function _createConnection() {
                    alert('creating RTCPeerConnection...');

                    // Create a new PeerConnection
                    var connection = new RTCPeerConnection(null); // null = no ICE servers

                    // A new ICE candidate was found
                    connection.onicecandidate = function (event) {
                        if (event.candidate) {
                            // Let's sendST it to our peer via SignalR
                            hub.server.sendST(JSON.stringify({ "candidate": event.candidate }));
                        }
                    };

                    // New remote media stream was added
                    connection.onaddstream = function (event) {
                       
                        // Create a new HTML5 Video element
                        var newVideoElement = document.createElement('video');
                        newVideoElement.className = 'video';
                        newVideoElement.autoplay = 'autoplay';

                        // Attach the stream to the Video element via adapter.js
                        attachMediaStream(newVideoElement, event.stream);

                        // Add the new Video element to the page
                        document.querySelector('body').appendChild(newVideoElement);

                        // Turn off the call button, since we should be in a call now
                        document.querySelector('#startBtn').setAttribute('disabled', 'disabled');
                    };

                    return connection;
                }

                // Callback that receives notifications from the SignalR server
                hub.client.newMessage = function (data) {
                 
                    var message = JSON.parse(data),
                        connection = _myConnection || _createConnection(null);

                    // An SDP message contains connection and media information, and is either an 'offer' or an 'answer'
                    alert(message);
                    if (message.sdp) {
                        alert("ggg");
                        alert(JSON.stringify(message.sdp));
                        connection.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
                            alert("ggg");
                            if (connection.remoteDescription.type == 'offer') {
                                alert('received offer, sendSTing answer...');

                                // Add our stream to the connection to be shared
                                connection.addStream(_myMediaStream);

                                // Create an SDP response
                                connection.createAnswer(function (desc) {
                                    // Which becomes our local session description
                                    connection.setLocalDescription(desc, function () {
                                        // And sendST it to the originator, where it will become their RemoteDescription
                                        hub.server.sendST(JSON.stringify({ 'sdp': connection.localDescription }));
                                    });
                                }, function (error) { alert('Error creating session description: ' + error); });
                            } else if (connection.remoteDescription.type == 'answer') {
                                alert('got an answer');
                            }
                        });
                    } else if (message.candidate) {
                        alert('adding ice candidate...');
                        connection.addIceCandidate(new RTCIceCandidate(message.candidate));
                    }
                   

                    _myConnection = connection;
                };

                function init() {
                    alert("aaa");
                    const constraints = {
                        video: true,
                        audio: true
                    };
                    const video = document.querySelector('video');

                    navigator.mediaDevices.getUserMedia(constraints).
                        then((stream) => {
                            // Store off our stream so we can access it later if needed
                            _myMediaStream = stream;
                            video.srcObject = _myMediaStream
                            document.querySelector('#startBtn').removeAttribute('disabled');
                        });
                    //// Request permissions to the user's hardware
                    //getUserMedia(
                    //    // Media constraints
                    //    {
                    //        video: true,
                    //        audio: false
                    //    },
                    //    // Success callback
                    //    function (stream) {
                    //        alert(stream);
                    //        var videoElement = document.querySelector('#rtcVideo');

                    //        // Store off our stream so we can access it later if needed
                    //        _myMediaStream = stream;

                    //        // Add the stream to our Video element via adapter.js
                    //        attachMediaStream(videoElement, _myMediaStream);

                    //        // Now that we have video, we can make a call

                    //    },
                    //    // Error callback
                    //    function (error) {
                    //        // Super nifty error handling
                    //        alert(JSON.stringify(error));
                    //    }
                    //);

                    // Hookup the start button functionality
                    document.querySelector('#startBtn').addEventListener('click', function () {
                        alert("aaa")
                        _myConnection = _myConnection || _createConnection(null);

                        // Add our stream to the peer connection
                        _myConnection.addStream(_myMediaStream);
                        alert("aaa")

                        // Create an offer to sendST our peer
                        _myConnection.createOffer(function (desc) {
                            // Set the generated SDP to be our local session description
                            _myConnection.setLocalDescription(desc, function () {
                                // And sendST it to our peer, where it will become their RemoteDescription
                                hub.server.sendST(JSON.stringify({ "sdp": desc }));
                            });
                        }, function (error) { alert('Error creating session description: ' + error); });
                    });
                }
            })();
    </script>
}


<!-- the autoplay attribute is required to start displaying the feed -->
<video autoplay class="video mine" id="rtcVideo"></video>
<button id="startBtn" disabled="disabled">Start Call</button>

